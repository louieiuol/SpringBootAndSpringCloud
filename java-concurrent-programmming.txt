Java并发编程实战 

1.2 线程的优势
1. 有效的降低程序的开发和维护成本, 提升复杂应用程序的性能
2. 发挥多处理器强大的能力
3. 建模的简单性
4. 异步事件的简化处理
5. 响应更灵敏的用户界面

1.3 线程的风险

1.3.1 安全性问题

@NotThreadSafe
public class UnsafeSequence{
	private int value;

	//返回一个唯一的数值
	public int getNext(){
		return value++;
	}
}

如果执行时机不对, 那么两个线程在调用getNext()时会得到相同的值

@NotThreadSafe 标明不支持并发
@ThreadSafe 标明支持并发
@Immutable 标明不可被修改

使用synchronized同步方法 

@ThreadSafe
public class UnsafeSequence{
	@GuardedBy("this") private int value;

	//返回一个唯一的数值
	public synchronzied int getNext(){
		return value++;
	}
}


1.3.2 活跃性问题
当某个操作无法执行下去时, 就会发生活跃性问题, 在串行程序中, 活跃性问题的形式之一就是无意中造成的无限循环, 
从而使循环之后的代码无法得到执行

包括 死锁, 饥饿, 活锁

1.3.3 性能问题
响应不灵敏, 吞吐率过低, 资源消耗过高, 可伸缩性较低. 

框架通过在框架线程中调用应用程序代码将并发性引入到程序中, 在代码中将不可避免地访问应用程序状态, 因此所有访问
这些状态的代码都必须是线程安全的

下面的模块都将在应用程序之外的线程中调用应用程序的代码:
Timer: 确保TimerTask 访问的对象本身是线程安全的, 从而就能把线程安全性封装在共享对象内部. 
Servlet 和 JavaServer Page(JSP): Servlet和 JSP 以及在ServletContext和HttpSession 等容器中保存的Servlet
过滤器和对象, 都必须是线程安全的.
RMI: 远程对象必须注意两个线程的安全性问题, 正确的协同在多个对象中共享的状态, 以及对远程对象本身状态的访问. 
与Servlet相同, RMI对象应该做好被多个线程同时调用的准备，并且必须确保他们自身的线程安全性

第二章

线程安全性 

当多个线程访问某一个变量, 并且有一个线程执行写入操作时, 必须采用同步机制来协同这些线程对变量的访问. 

如果当多个线程访问同一可变状态变量时候, 没有使用合适的同步, 那么程序就会出现错误, 三种方式修复这个问题:
不在程线程间共享变量
将状态变量修改为不可变变量
在访问状态变量时同步

线程安全的定义: 
当多个线程访问某个类时, 不管运行环境采用何种调度方式或者这些线程将如何交替执行, 并且在主调代码中不需要
任何额外的同步或协同, 这个类都能表现出正确的行为, 那么就称这个类为线程安全的 

在线程安全类中封装了必要的同步机制, 因此客户端无须进一步采取同步措施

@ThreadSafe 
public class StatelessFactorizer implements Servlet{
	public void service(ServletRequest req, ServletResponse resp){
		BigInteger i = extractFromRequest(req);
		BigInteger[] factors = factor(i);
		encodeIntoResponse(resp, factors);
	}
}

无状态的对象一定是线程安全的

大多数的Servlet都是无状态的, 从而极大地降低了在实现Servlet线程安全性时的复杂性, 只有当Servlet在处理请求时需要保存一些信息
线程安全性才会成为一个问题

竞态条件Race condition
当某个计算的正确性取决于多个线程交替的执行时序时候, 那么就会发生竞态条件

先检查后执行 check-then-act操作就会产生一种竞态

@NotThreadSafe
public class LazyInitRace{
	private ExpensiveObject instance = null;

	public ExpensiveObject getInstance(){
		if(instance == null){
			instance = new ExpensiveObject();
		}
		return instance;
	}
}

复合操作

假定有两个操作A和B, 如果从执行A的线程来看, 当另一个线程执行B时, 要么将B全部执行完, 要么完全不执行B, 那么A和B对彼此来说是原子的,
原子操作是指, 对于访问同一个状态的所有操作, 包括该操作本身来说, 这个操作是一个以原子方式执行的操作.

使用AtomicLong类型的变量来统计已处理的请求的数量

@ThreadSafe
public class CountingFactorizer implements Servlet{
	private final AtomicLong count = new AtomicLong(0);

	public long getCount{rerturn count.get();}

	public void service(ServletRequest req, ServletResponse resp){
		BigInteger i = extractFromRequest(req);
		BigInteger[] factors = factor(i);
		count.incrementAndGet();
		encodeIntoResponse(resp, factors);
	}
}

尽可能使用现有安全对象来管理类的状态, 与非线程安全的对象相比, 判断线程安全对象的可能状态及其状态转换情况要更为容易,
从而也更容易维护和验证线程安全性

要保持状态的一致性, 就需要在单个原子操作中更新所有相关的状态变量

内置锁

Java提供了一种内置锁机制来支持原子性, 同步代码块synchronized block

一个作为锁的对象引用, 一个作为由这个锁保护的代码块

synchrozied(lock){
	...
}

重入 

内置锁是可以重入的, 因此如果某个线程试图获得一个已经由它自己持有的锁, 那么这个请求就会成功

对于可能被多个线程同时访问的可变状态变量, 在访问它时都需要持有同一个锁, 在这种情况下, 我们称状态变量是由这个锁保护的

对于每个包含变量的不变性条件, 其中涉及的所有变量都要由同一个锁来保护

在执行时间较长的计算或者可能无法快速完成的操作时, 例如网络i/o, 一定不要持有锁

第三章 对象的共享

重排序: reordering  在没有同步的情况下, 编译器, 处理器以及运行时都可能对操作的执行顺序进行一些意想不到的调整.

加锁的含义不仅仅局限于互斥行为, 还包括内存可见性, 为了确保所有线程都能看到共享变量的最新值, 所有执行读操作或者写操作的线程
都必须在同一个锁上同步

volatile

把变量声明为volatile类型后, 会注意到这个变量是共享的, 因此不会将该变量上的操作与其他内存操作一起重排序

一种比sychronized更轻量的同步锁

仅当volatile变量能简化代码的实现以及对同步策略的验证时, 才应该使用它们. 如果在验证正确性时需要对可见性进行复杂的判断， 
那么就不要使用volatile变量. volatile变量的正确使用方式包括: 确保它们自身状态的可见性, 确保它们所引用对象的状态可见性,
以及标识一些重要程序生命周期事件的发生

加锁机制既可以确保可见性又可以确保原子性, 而volatile变量只能确保可见性

满足以下条件时候才能使用volatile变量
1. 对变量的写入操作不依赖变量的当前值, 或者只有单个线程更新变量的值
2. 该变量不会与其他状态变量一起加入不变性条件中
3. 访问变量不需要加锁

发布与逸出
发布 public: 使对象能够在当前作用域之外的代码中使用
逸出 escape: 当某个不该被发布的对象被发布时, 这种情况被称之为逸出

不要在构造过程中使this引用逸出

在构造过程中使this引用逸出的一个常见错误是, 在构造函数中启动一个线程. 当对象在其构造函数中创建一个线程时, this引用都会被
新创建的线程共享

使用工厂方法来防止this引用在构造过程中逸出

public class SafeListener{
	private final EventListener listener;
	private SafeListener(){
		listener = new EventListener(){
			public void onEvent(Event e){
				doSomething(e);
			}
		}
	}

	public static SafeListener newInstance(EventSource source){
		SafeListener safe = new SafeListener();
		source.registerListener(safe.listener);
		return safe;
	}
}

Ad-hoc线程封闭

维护线程封闭性的职责完全由程序实现来承担. 
Ad-hoc线程封闭性是非常脆弱的, 因为没有任何一种语言特性, 能将对象封闭到目标线程上

栈封闭
只能通过局部变量才能访问对象, 比ad-hoc更易于维护, 也更加健壮
基本类型的局部变量, 无论如何不会破坏栈封闭性

基本类型的局部变量与引用变量的线程封闭性
public int loadTheArk(Collection<Animal> candidates){
	SortedSet<Animal> animals;
	int numPairs = 0;
	Animal candiate = null;

	animals = new TreeSet<Animal>(new SpeciesGenderComparator());
	animals.addAll(candidates);
	for(Animal a: animals){
		if(candidate == null || !candidate.isPotentialMate(a)){
			candidate = a;
		}else{
			ark.load(new AnimalPair(candidate, a));
			++numPairs;
			candidate = null;
		}
	}
	return numPairs;
}

维持线程封闭性的更规范方法

使用ThreadLocal

ThreadLocal提供了get/set等访问接口或者方法, 这些方法为每个使用该变量的线程都存有一份独立的副本, 因此get总是返回由当前线程
在调用set时设置的最新值

ThreadLocal变量通常用于防止对可变单实例变量Singleton或全局变量进行共享

eg: 单线程应用程序中可能会维持一个全局的数据库连接, 并在程序启动时初始化这个连接对象不一定是线程安全的, 因此, 当多线程应用程序
在没有协同的情况下使用全局变量时, 就不是线程安全的.通过将JDBC的连接保存在ThreadLocal中, 每个线程都会拥有属于自己的连接

使用ThreadLocal来维护线程封闭性

private static ThreadLocal<Connection> connectionHolder = new ThreadLocal<>(){
	public Connection initialValue(){
		return DriverManager.getConnection(DB_URL);
	}
}

public static Connection getConnection(){
	return connectionHold.get();
}

当某个频繁执行的操作需要一个临时对象, 比如一个缓冲区, 同时又希望避免在每次执行时都重新分配该临时对象, 就可以使用这项技术
当某个线程初次调用ThreadLocal.get方法时, 就会调用initialValue()来获得初始值，这些特定于线程的值保存在Thread对象中, 当
线程终止后, 这些值会作为垃圾回收

假如你需要将一个单线程程序移至多线程环境中, 通过将共享的全局变量转换为ThreadLocal对象，可以维持线程安全性

不可变对象一定是线程安全的

即使所有的域都是final类型的, 这个对象仍然是可变的, 因为在final类型的域可以保存对可变对象的引用

当满足以下条件时, 对象才是不可变的
*对象创建以后其状态就不能修改
*对象所有的域都是final类型
*对象是正确创建的(this引用没有逸出)


除非需要更高的可见度, 否则应将所有的域都声明为private, 除非需要某个域是可变的, 否则应将其声明为final域

每当需要对一组相关数据进行原子方式执行某个操作时, 就可以考虑创建一个不可变的类来包含这些数据

使用Volatile类型来发布不可变对象

@Immutable
class OneValueCache{
	private final BigInteger lastNumber;
	private final BigInteger[] lastFactors;

	public OneValueCache(BigInteger i, BigInteger[] factors){
		lastNumber = i;
		lastFactors = Arrays.copyOf(factors, factors.length);
	}

	public BigInteger[] getFactors(BigInteger i){
		if(lastNumber == null || !lastNumber.equals(i)) return null;
		else return Arrays.copyOf(lastFactors, lastFactors.length);
	}
}

对于在访问和更新多个相关变量时出现的竞争条件问题, 可以通过将这些变量全部保持在一个不可变对象中来消除

@ThreadSafe
public class VolatileCachedFactorizer implements Servlet{
	private volatile OneValueCache cache = new OneValueCache(null, null);

	public void service(ServletRequest req, ServletResponse resp){
		BigInteger i = extractFromRequest(req);
		BigInteger[] factors = cache.getFactors(i);
		if(factors == null){
			factors = factor(i);
			cache = new OneValueCache(i, factors);
		}
		encodeIntoResponse(resp, factors);
	}
}

与cache相关的操作不会相互干扰, 因为OneValueCache是不可变的, 并且在每条相应的代码中路径中只会访问它一次.
通过使用包含多个状态变量的容器来维持不变性条件, 并使用一个volatile类型的引用来确保可见性, 使得Volatile 
Cached Factorizer 在没有显示的使用锁的情况下仍然是线程安全的

安全发布

某些情况下, 我们希望在多个线程间共享对象, 此时必须确保安全的进行共享, 如果只是将对象保存在公有域中, 那么还不足
安全的发布这个对象

//不安全的发布

public Holder holder;

public void initialize(){
	holder = new Holder(42);
}

//不正确的发布

你不能之外一个尚未完全创建的对象拥有完整性, 某个观察该对象的线程将看到对象处于不一致的状态, 然后看到对象的状态
突然发生变化, 即使线程在对象发布后还没有修改过它

不安全的发布, 那么另一个线程在调用时可能抛出AssertionError

//不太好的做法
public class Holder{
	private int n;
	public Holder(int n){
		this.n = n;
	}
	public void assertSanity(){
		if(n != n){
			throw new AssertionError("This statement is false");
		}
	}
}


安全发布常用模式

要安全的发布一个对象, 对象的引用以及对象的状态必须同时对其他线程可见, 一个正确构造对象可以通过以下方式来安全的发布
*在静态初始化函数中初始化一个对象的引用
*将对象的引用保存在volatile类型的域或者AtomicReference中
*将对象的引用保存在某个正确构造对象的final类型域中
*将对象的引用保存在一个由锁包含的域中

线程安全库中的容器类提供了以下安全发布的保证: 
*通过将一个键值放入Hashtable, synchronizedMap, 或者concurrentMap中, 可以安全地将它发布给任何从这些容器访问它的线程
*通过将元素放入Vector, CopyOnWriteArrayList, CopyOnWriteArraySet, synchronziedList或者synchronziedSet中
可以将该元素安全的发布到任何这些容器中访问该元素的线程
*通过将某个元素放入BlockQueue或者ConcurrentListedQueue中, 可以将元素安全地发布到任何从这些队列中访问该元素的线程
类库中其他数据传递机制 Future 和 Exchanger 同样能实现安全发布

静态初始化器由JVM在类的初始化阶段执行, 由于JVM内部存在着同步机制, 因此通过这种方式初始化任何对象都可以被安全的发布
public static Holder holder = new Holder(42);

事实不可变对象

如果对象从技术上看是可变的, 但其状态在发布后不会再改变, 那么把这种对象称为事实不可变对象(Effectively Immutable Object)

在没有额外同步的情况下, 任何线程都可以安全的使用被安全发布的事实不可变对象


例如: Date本身是可变的, 但是如果作为不可变对象来使用, 那么在多个线程共享Date对象时, 就可以省去对锁的使用
假设需要维护一个Map对象, 其中保存了每位用户的最近登录时间:

public Map<String, Date> lastLogin = Collections.synchronizedMap<new HashMap<String, Date>());
如果Date对象的值在被放入Map后就不会改变, 那么synchronizedMap中的同步机制就足以使Date值被安全发布, 并且访问时不需要额外同步

可变对象

如果对象在构造后可以修改, 那么安全发布只能确保当时状态的可见性, 对于可变对象, 不仅在发布时需要同步, 而且在每次对象访问时需要
使用同步来确保后续修改操作的可见性.要安全的共享可变对象, 这些对象就必须被安全发布, 并且必须是线程安全的或者由某个锁保护起来

对象的发布取决于它的可变性: 
*不可变对象可以通过任意机制来发布
*事实不可变对象必须通过安全方式来发布
*可变对象必须通过安全方式来发布, 并且必须是线程安全的或者某个锁保护起来

安全的共享对象

并发程序中使用和共享对象时, 可以使用一些实用的策略, 包括:
线程封闭: 线程封闭的对象只能由一个线程拥有, 对象被封闭在该线程中, 并且只能由这个线程修改
只读共享: 在没有额外同步的情况下, 共享的只读对象可以由多个线程并发访问, 但任何线程都不能修改它, 共享的只读对象包括不可变对象
和事实不可变对象
线程安全共享: 线程安全的对象在其内部实现同步, 因此多个线程可以通过对象的公有接口来进行访问而不需要进一步的同步
保护对象: 被保护的对象只能通过持有特定的锁来访问. 保护对象包括封装在其他线程安全对象中的对象, 以及已发布的并且由某个特定锁保护的对象

第四章
对象的组合

4.1 设计线程安全的类

三个基本要素:
1. 找出构成对象状态的所有变量
2. 找出约束状态变量的不变性条件
3. 建立对象状态的并发访问管理策略

同步策略(Synchronization policy)定义了如何在不违背对象不变条件或后验条件的情况下对其状态的访问操作进行协同

如果不了解对象的不变性条件与后验条件, 那么就不能确保线程安全性, 要满足在状态变量的有效值或状态转换上的各种约束条件
, 就需要借助原子性和封装性

4.2实例封闭

如果对象不是线程安全的, 就需要确保该对象只能由单个线程访问或者通过一个锁来保护该对象的所有访问

将数据封装在对象内部, 可以将数据的访问限制在对象的方法上, 从而更容易确保线程在访问数据时总能持有正确的锁

PersonSet说明了如何通过封闭与加锁等机制使一个类成为线程安全的

通过封闭机制来确保线程安全
@ThreadSafe
public class PersonSet{
	@guardedBy("this")
	private final Set<Person> mySet = new HashSet<>();               <------ private final 限制了mySet不会逸出

	public synchronized void addPerson(Person p){					 <------ 状态由内置锁保护
		mySet.add(p);
	}

	public synchronized boolean containsPerson(Person p){			 <------ 状态由内置锁保护
		return mySet.contains(p);
	}
}


封闭机制更易于构造线程安全的类, 因为当封闭类的状态时, 在分析类的线程安全性时就无需检查整个程序

4.2.1 Java监视器模式

通过一个私有锁来保护状态

public class privateLock{
	private final Object myLock = new Object();
	@GuardedBy("mylock") Widget widget;

	void someMethod(){
		synchronized(mylock){
			//访问或修改widget状态
		}
	}
}

使用私有的锁对象而不是对象的内置锁, 有许多优点, 私有的锁对象可以将锁封装起来, 使客户代码无法得到锁, 但客户代码可以通过
公有方法来访问锁, 以便参与到它的同步策略中.

eg: 

每台车都有一个String对象来标识, 并且拥有一个相应的位置坐标(x, y)

Map<String, Point> locations = vehicles.getLocations();
for(String key: locations.keySet()){
	renderVehicle(key, locations.get(key));
}

执行更新操作的线程通过从GPS设备上获得的数据或者调度员从GUI界面上输入的数据来修改车辆位置
void vehicleMoved(VehicleMovedEvent evt){
	Point loc = evt.getNewLocation();
	vehicles.setLocation(evt.getVehicledId(), loc.x, loc.y);
}

Java监视器模式实现的车辆追踪

@ThreadSafe
public class MonitorVehicletracker{
	@GuardedBy("this")
	private final Map<String, MutablePoint> locations; 

	public MonitorVehicleTracker(Map<String, MutablePoint> locations){
		this.locations = deepCopy(locations);
	}

	public synchronized Map<String, MutablePoint> getLocations(){
		return deepCopy(locations);                    <---- locations 是可变的hashMap, 需要复制确保线程安全
	}

	public synchronized MutablePoint getLocation(String id){
		MutablePoint loc = locations.get(id);
		return loc == null ? null : new MutablePoint(loc);
	}

	public synchronized void setLocation(String id, int x, int y){
		MutablePoint loc = locations.get(id);
		if(loc == null){
			throw new IllegalArgumentException("No such ID: "+ id);
		}
		loc.x = x;
		loc.y = y;
	}

	private static Map<String, MutablePoint> deepCopy(Map<String, MutablePoint> m){
		Map<String, MutablePoint> result = new HashMap<String, MutablePoint>();
		for(String id: m.keySet()) 
			result.put(id, new MutablePoint(m.get(id)));  <----- 该类是可变类, 需要复制确保线程安全
		return Collections.unmodifiableMap(result);
	}

	public class MutablePoint{...}
}

eg: 基于委托的车辆追踪器
	构造一个委托给线程安全类的车辆追踪器

用不可变Point来代替MutablePoint以保存位置

@Immutable
public class Point{
	public final int x ,y;
	public Point(int x, int y){
		this.x=x;
		this.y=y;
	}
}


将线程安全委托给ConcurrentHashMap

@ThreadSafe
public class DelegatingVehicleTracker{
	private final ConcurrentMap<String, Point> locations;
	private final Map<String, Point> unmodifiableMap;

	public DelegatingVehicleTracker(Map<String, Point> points){
		locations = new ConcurrentHashMap<String, Point>(points);
		unmodifiableMap = Collections.unmodifiableMap(locations);
	}

	public Map<String, Point> getLocations(){
		return unmodifiableMap<>();
	}

	public Point getLocation(String id){
		return locations.get(id);
	}

	public void setLocation(String id, int x, int y){
		if(locations.replace(id, new Point(x, y)) == null){
			throw new IllegalArgumentException("Invalid vehicle name: "+ id);
		}
	}
}

返回locations的静态拷贝而非浅拷贝

public Map<String, Point> getLocations(){
	return Colllections.unmodifiableMap(new HashMap<String, Point>(locations));  
	<---- 由于Map内容是不可变的, 因此只需要复制map结构, 而不用复制它的内容
}


将线程安全委托给多个状态变量

public class VisualComponent{
	private final List<KeyListener> keyListeners = new CopyOnWriteArrayList<KeyListener>();
	private final List<MouseListener> mouseListeners = new CopyOnWriteArrayList<MouseListener>();

	public void addKeyListener(KeyListener listener){
		keyListener.add(listener);
	}

	public void addMouseListener(MouseListener listener){
		mouseListener.add(listener);
	}

	public void removeKeyListener(KeyListener listener){
		keyListeners.remove(listener);
	}

	public void removeMouseListener(MouseListener listener){
		mouseListeners.remove(listener);
	}
}

CopyOnWriteArray来保存各个监听器列表, 是一个线程安全的链表, 特别适用于管理监听器列表

先检查后执行的操作没有用加锁机制无法保证原子性

如果一个状态变量是线程安全的, 并且没有任何不变性条件来约束它的值, 在变量的操作上也不存在任何不允许的状态转换
, 那么就可以安全的发布这个变量

车辆追踪器的另一个版本, 并在这个版本中发布底层可变状态, 使用可变且线程安全的Point类

把x, y放到一个数组中, 避免分别提供get方法

线程安全且可变的Point类

@ThreadSafe
public class SafePoint{
	@GuardBy("this") private int x, y;

	private SafePoint(int[] a){
		this(a[0], a[1]);
	}

	private SafePoint(SafePoint p){
		this(p.get());
	}

	public SafePoint(int x, int y){
		this.x = x;
		this.y = y;
	}

	public synchronized int[] get(){
		return new int[] {x, y};
	}

	public synchronized void set(int x, int y){
		this.x = x; 
		this.y = y;
	}
}

@ThreadSafe 
public class PublishingVehicleTracker{
	private final Map<String, SafePoint> locations; 
	private final Map<String, SafePoint> unmodifiedMap;

	public PublishingVehicleTracker(Map<String, SafePoint> locations){
		this.locations = new ConcurrentHashMap<String, SafePoint>)(locations);
		this.unmodifiableMap = Collections.unmodifiableMap(this.locations);
	}

	public Map<String, SafePoint> getLocations(){
		return unmodifiableMap;
	}

	public SafePoint getLocation(String id){
		return locations.get(id);
	}

	public void setLocation(String id, int x, int y){
		if(!locations.containsKey(id)) 
			throw new Illegal
	}
}

PublishingVehicleTracker是线程安全的, 但如果它在车辆位置有效值上施加了任何约束, 那么就不再是线程安全的.
如果需要对车辆位置的变化进行任何判断或者当前位置变化时执行了一些操作, 那么则是线程不安全的

在现有的线程安全类中添加功能

1. 修改原始类, 但通常无法访问或修改类的代码
2. 扩展这个类并添加线程安全的方法

扩展Vector并增加一个"putIfAbsent"的方法

@ThreadSafe
public class BetterVector<E> extends Vector<E>{
	public synchronized boolean putIfAbsent(E x){
		boolean absent = !contains(x);
		if(absent)
			add(x);
		return absent;
	}
}

扩展方法比直接将代码添加到类中更加脆弱, 因为同步策略实现被分布到多个单独维护的源代码文件中, 如果底层类改变了
同步策略, 并选择了不同的锁来保护它的状态变量, 那么子类会被破坏, 因为同步策略改变后它无法再使用正确的锁来控制
对基类状态的并发访问.

4.4.1 客户端加锁机制

3. 扩展类的功能, 将扩展代码放入一个"辅助类"中

@NotThreadSafe
public class ListHelper<E>{
	public List<E> list = Collections.synchronizedList(new ArrayList<E>());
	...
	public synchronized boolean putIfAbsent(E x){
		boolean absent = !list.contains(x);
		if(absent)
			list.add(x);
		return absent;	
	} 
}

问题在于在错误的锁上进行了同步, 无论list使用哪一个锁来保护它的状态, 可以确定的是这个锁并不是ListHelper上的,
ListHelper只是带来了同步的假象, 这意味着ListHelper相对于List其他的操作来说并不是原子的

要让这个方法能正确执行, 必须使List实现客户端加锁或外部加锁时使用同一个锁。 

通过客户端加锁来实现"putIfAbsent"

@ThreadSafe
public class ListHelper<E>{
	public List<E> list = Collections.synchronizedList(new ArrayList<E>());
	...
	public boolean putIfAbsent(E x){
		synchronized(list){
			boolean absent = !list.contains(x);
			if(absent)
				list.add(x)
			return absent;	
		}
	}
}

4.4.2 组合 

为现有的类添加一个原子操作时, 有一种更好的方法: 组合. 
ImprovedList通过将List对象的操作委托给底层的List实例来实现List的操作, 同时还添加了一个原子的putIfAbsent方法
ImprovedList假设把某个链表对象传给构造函数后, 客户代码不会再直接使用这个对象, 而只能通过ImprovedList来访问它

@ThreadSafe
public class ImprovedList<T> implements List<T> {
	private final List<T> list;
	public ImprovedList<list<T> list){
		this.list = list;
	}
	public synchronzied boolean putIfAbsent(T x){
		boolean contains = list.contains(x);
		if(contains)
			list.add(x)
		return !contains;
	}

	public synchronized void clear(){list.clear()}
	//...按照类似的方法
}

ImprovedList通过自身的内置锁增加了一层额外的加锁, 它并不关心底层的list是否线程安全, 即使List不是线程安全或者
修改了加锁实现, ImprovedList也会提供一致的加锁机制来实现线程安全性

如果使用锁来保护, 添加@GuardedBy("this")

第五章
基础构建模块

5.1 同步容器类
同步容器类都是线程安全的, 但是某些情况下可能需要额外的客户端加锁来保护复合操作

常见的复合操作包括: 迭代, 跳转, 条件

Vector上可能导致混乱的复合操作

public static Object getlast(Vector list){
	int lastIndex = list.size()-1;
	return list.get(lastIndex);
}

public static void deleteLast(Vector list){
	int lastIndex = list.size()-1;
	list.remove(lastIndex);
}

A ---> size = 10 -------> get(9) -----> wrong
B ---> size = 10 -------> remove(9)

交替调用getlast和deletelast时将抛出ArrayIndexOutOfBoundException


同步容器类通过自身的锁来保护它的每一个方法, 通过获得自身的锁, 我们可以使其成为原子操作

public static Object getLast(Vector list){
	synchronized(list){
		int lastIndex = list.size() -1;
		retiurn list.get(lastIndex);
	}
}

public static void deleteLast(Vector list){
	synchronized(list){
		int lastIndex = list.size()-1;
		list.remove(lastIndex);
	}	
}

再调用size和get之间, vector商都可能会发生变化, 这种风险在对Vector中的元素进行迭代时仍然会出现

可能会抛出ArrayIndexOutOfBoundsException的迭代操作
for(int i=0; i < vector.size(); i++) 
	doSomething(vector.get(i));

通过在客户端加锁来解决不可靠迭代的问题, 但是要牺牲一些伸缩性

synchronized(vector){
	for(int i=0; i < vector.size(); i++)
		doSomething(vector.get(i));
}

迭代器与ConcurrentModificationException

通过Iterator来迭代List

List<Widget> widgetList = Collections.sysnchronziedList(new ArrayList<>());
...
//可能抛出ConcurrentModificationException
for(Widget w: widgetList){
	doSomething(w);
}

如果不希望在迭代期间对容器加锁, 那么一种替代方案就是克隆容器, 并在副本上进行迭代. 由于副本被封闭在线程
内, 因此其他线程不会在迭代期间对其进行修改, 这样就避免抛出ConcurrentModificationException

5.1.3 隐藏迭代器

隐藏在字符串连接中的迭代操作
public class HiddenIterator(){
	@GuardedBy("this")
	private final Set<Integer> set = new HashSet<>();

	public synchronzied void add(Integer i){ set.add(i); }
	public synchronzied void remove(Integer i) {set.remove(i); }

	public void addTenThings(){
		Random r = new Random();
		for(int i = 0; i < 10; i++)
			add(r.nextInt())
		System.out.println("..."+ set);
	}
}

addTenThings方法可能会抛出ConcurrentModificationException, 因为在生成消息的过程中, toString()会对容器
进行迭代. 如果HiddenIterator用synchronizedSet来包装HashSet, 并且对同步代码进行封装, 就不会发生这种错误.

正如封装对象的状态有助于维持不变性条件一样, 封装对象的同步机制同样有助于确保实施同步策略. 

容器的hashCode和eqauls方法也会间接的执行迭代操作, 当容器作为另一个容器的元素或者键值时, 就会出现这种情况
containsAll, removeAll, retainAll等方法, 以及把容器作为构造函数的参数, 都会对容器进行迭代.

5.2 并发容器

同步容器: 将所有对容器状态得访问都串行化, 以实现他们的线程安全性, 这种方法的代价是严重降低并发性, 当多个线程
竞争容器的锁时, 吞吐量将严重降低

并发容器: 针对多个线程并发访问设计的, ConcurrentHashMap, 用来代替同步且基于散列的Map, 
CopyOnWriteMap, 用于再遍历操作代替List

利用并发容器来代替同步容器, 可以极大的提高伸缩性并降低风险

Queue 提供了几种实现 
1. ConcurrentLinkedQueue 传统的并发队列
2. PriorityQueue 非并发的优先队列
3. BlockingQueue 增加了可阻塞的插入和获取等操作, 如果队列为空, 那么获取元素的操作将一直阻塞,
直到队列中出现一个可用的元素, 如果队列已满, 那么插入元素操作将一直阻塞

Map中
1. ConcurrentHashMap 代替HashTable 
2. ConcurrentSkipListMap 代替 SortedMap 
3. ConcurrentSkipListSet 代替 SortedSet

5.2.1 ConcurrentHashMap原理

ConcurrentHashMap也是基于一个散列的Map, 但使用了更好的加锁策略来提供更高的并发性和伸缩性
ConcurrentHashMap并不是将每个方法都在同一个锁上同步并使得每次只能由一个线程访问容器, 而是使用一种粒度更细的加锁
机制来实现更大程度的共享, 称为分段锁, 在这种机制中, 任意数量的线程可以并发的访问Map, 执行读取操作的线程和执行写入
操作的线程可以并发的访问Map, 并且一定数量的写入可以并发的修改Map, ConcurrentHashMap带来的结构是在并发访问环境下
将实现更高的吞吐量, 而在单线程环境中损失很小的性能.

ConcurrentHashMap与其他并发容器一起增强了同步容器类: 它们提供的迭代器不会抛出ConcurrentModificationException,
因此不需要再迭代过程中对容器加锁. ConcurrentHashMap返回的迭代器具有弱一致性 weak consistency. 弱一致性的迭代器
可以容忍并发的修改, 当创建迭代器时会遍历已有元素, 并可以在迭代器被构造后将修改反映给容器

5.2.2 额外的原子Map操作时 考虑使用ConcurrentHashMap

由于ConcurrentHashMap不能被加锁来执行独占访问, 因此我们无法用客户按加锁来创建新的原子访问

putIfAbsent(), remove(), replace()时考虑使用ConcurrentHashMap

5.2.3 CopyOnWriteArrayList 

CopyOnWrite的线程安全性在于, 只要正确发布一个事实不可变对象, 那么在访问该对象时就不需要进一步同步. 在每次修改时, 
都会创建并重新发布一个新的容器副本, 从而实现可变性。 

多个线程可以对这个容器同时进行迭代, 而不会互相干扰. 迭代器不会抛出ConcurrentModificationException

5.3 拥塞队列与生产者模式

拥塞队列提供了可阻塞的pull和take 方法, 以及支持定时的offer和poll方法, 如果队列已经满了, 那么put 方法将阻塞直到有
空间可用, 如果队列为空, 那么take方法将会阻塞直到有元素可用. 

该模式将"找出需要完成的工作", "执行工作"分离开来, 并把工作项放入一个待完成列表中以便随后处理, 而不是立即处理
生产者-消费者模式消除了代码之间的依赖性

BlockingQueue简化了生产者-消费者设计的实现过程, 支持任意数量的生产者和消费者, 一种最常见的生产者-消费者设计模式
就是线程池与工作队列的组合

拥塞队列简化了消费者程序的编码, 因为take操作会一直阻塞直到有可用的数据, 如果生产者不能尽快产生工作使消费者保持忙碌
, 那么消费者就会一直等待, 直到有哦你工作可做.

如果生产者生成的工作速率比消费者处理工作的速率快, 那么工作项会在队列积累起来, 最终耗尽内存. put方法的阻塞特性简化
了生产者的编码, 如果使用有界队列, 那么当队列充满时, 生产者将阻塞并且不能继续生成工作, 而消费者就有时间赶工处理进度
同样提供了offer方法, 如果数据不能被添加到队列中, 那么将返回一个失败状态. 这样你就能创建更多的灵活策略来处理负载的情况
, 例如减轻负载, 将多余工作序列化写入磁盘, 减少生产者线程数量, 或者某种方式抑制生产者线程. 

在构筑高可靠性的应用程序时, 有界队列是一种很强大的资源管理工具, 它们能抑制并防止生产过多的工作项, 使应用程序在负载
情况下变得更加健壮

BlockQueue的多种实现
1. LinkedBlockingQueue 和 ArrayBlockingQueue使FIFO队列, 两者分别与LinkedList和ArrayList类似, 但比同步List拥有
更好的并发性
2. PriorityBlockingQueue 是一个按优先级排序的队列, 当你希望以某种顺序而不是FIFO时候
3. SynchronousQueue 不会为队列中元素维护储存空间, 它维护一组线程, 这些线程在等待着把元素加入或移出队列. 
由于可以直接交付工作, 降低了将数据从生产者移动到消费者的延迟

5.3.1 并发示例: 桌面搜索

有一种类型的程序适合被分解为生产者和消费者, 例如代理程序, 它将扫描本地驱动器上的文件并建立索引以便随后进行搜索, 类似某些
桌面搜索程序或者windows索引服务

DiskCrawler中给出了一个生产者任务, 即在某个文件层次结构中搜索复合索引标准的文件, 并将它们的名称放入工作队列. 而且在Indexer
中还给出了一个消费者任务, 即从队列中取出文件名, 并对它们建立索引. 


//生产者 文件遍历
public class FileCrawler implements Runnable{
	private final BlockingQueue<File> fileQueue;   <---- 拥塞队列
	private final FileFilter fileFilter;
	private final file root;
	...
	
	public void run(){
		try{
			crawl(root);
		}catch(InterruptedException e){
			Thread.currentThread.interrupt();  		<---- 捕获异常
		}
	}

	private void crawl(File root) throws InterruptedException{
		File[] entries = root.listFiles(fileFilter);    <----- 文件列表
		if(entries != null){
			for(File entry: entires){
				if(entry.isDirectory())
					crawl(entry);						<----- 递归
				else if(alreadyIndexed(entry))
					fileQueue.put(entry);               <----- 放入队列
			}
		}
	}
}


//消费者 文件索引
public class Indexer implements Runnable{
	private final BlockingQueue<File> queue; 		<---- 拥塞队列

	public Indexer(BlockingQueue<File> queue){    
		this.queue = queue;
	}

	public void run(){
		try{
			while(true){                       		 <----- 表示队列中只要有数据就读取
				indexFile(queue.take());             <----- 读取队列
			}catch(InterruptedException e){
				Thread.currentThread().interrupt();	 <---- 捕获异常
			}
		}
	}
}

生产者-消费者模式提供了一种适合线程的方法将桌面搜索问题分解为更简单的组件. 将文件遍历与建立索引等功能分解为独立操作
, 比如将所有功能都放到一个操作中实现由更高的代码可读性和可重用性: 每个操作只需完成一个任务, 并且阻塞队列将负责所有的
控制流, 每个功能的代码都更加简单和清晰. 

生产者-消费者模式同样也能带来性能优势. 生产者和消费者可以并发执行, 如何一个是I/O密集型, 如果一个是CPU密集型, 那么并发
密集型要高于串行执行的吞吐率. 如果生产者消费者的并行度不同, 那么将它们紧密耦合在一起会把整体并行度降低为2者中更小的并行度

该模型启动了多个爬虫程序和索引程序, 每个程序都在各自的线程中运行, 消费者线程永远不会退出, 因而程序无法种植

很多生产者-消费者模型也可以通过Executor任务执行框架来实现

//启动类, 启动桌面搜索
public static void startIndexing(File[] roots){
	BlockingQueue<File> queue = new LinkedBlockingQueue<File>(BOUND);  <----- 新建拥塞队列, 设定队列大小
	FileFilter filter = new FileFilter(){							   <----- 定义文件过滤器
		public boolean accept(File file){
			return true;			
		}
	}

	for(File root: roots){												
		new Thread(new FileCrawler(queue, filter, root)).start(); 		<----- 循环创建生产者线程
	}

	for(int i = 0; i < N_CONSUMERS; i++){
		new Thread(new Indexer(queue)).start();							<----- 循环创建消费者线程
	}
}


5.3.2 串行线程封闭
java.util.concurrent 中实现的各种阻塞队列都包含了足够的内部同步机制, 从而安全的将对象从生产者线程发布到消费者线程
对于可变对象, 生产者-消费者这种设计与阻塞队列一起, 促进了串行线程封闭, 从而将对象所有权从生产者交付给消费者. 线程封闭
对象只能由单个线程拥有, 但可以通过安全地发布对象来"转移"所有权. 在转移所有权后, 只有另一个线程能获得这个对象的访问权限
, 并且发布对象的线程不会再访问它.

这种安全的发布确保了对象状态对于新的所有者来说是可见的, 并且由于最初的所有者不会访问它, 因此对象被封闭在新的线程中.

对象池利用了串行线程封闭, 将对象借给一个请求线程, 只要对象池包含足够的内部同步安全的发布池中的对象, 并且只要客户代码
本身不会发布池中对象, 或者在将对象返回给对象池后就不再使用它, 那么就可以安全的在线程之间传递所有权

我们可以使用其他发布机制来传递可变对象的所有权, 但必须确保只有一个线程能接受被转移的对象, 阻塞队列简化了这项工作, 除此之外
还可以通过ConcurrentMap的原子方法remove或者AtomicReference的原子方法compareAndSet来完成

5.3.3 双端队列与工作密取实现高效并行

Deque是个双端队列, 实现了在队列头尾的高效插入和移除, 具体实现包括ArrayDeque和LinkedBlockingDeque.

正如阻塞队列适用于生产者消费者模式, 双端队列同样适用于另一种相关模式, 即工作密取(Working Stealing)

在生产者-消费者设计中, 所有消费者有一个共享的工作队列, 而在工作密取设计中, 每个消费者都有各自的双端队列
如果一个消费者完成了自己双端队列中的全部工作, 那么它可以从其他消费者双端队列末尾秘密获取工作
密取工作模式比传统的生产者, 消费者模式具有更高的可伸缩性, 因为工作者线程不会单个共享的任务队列上发生竞争.
大多数时候, 它们只是访问自己的双端队列, 从而极大减少了竞争. 当工作者线程需要访问另一个队列时, 它会从队列
的尾部而不是从头部获取工作, 因此进一步降低了队列上的竞争程度. 

工作密取非常适用于既是消费者也是生产者的问题: 当执行某个工作时, 可能导致出现更多的工作. 
eg: 网页爬虫程序中处理一个页面时, 通常会发现有更多的页面需要处理
	搜索图的算法, 在垃圾回收阶段对堆进行标记

5.4 阻塞方法与中断方法

线程可能会阻塞或者暂停执行
eg: 等待I/O 操作结束
	等待获得一个锁
	等待从Thread.sleep方法中醒来
	等待另一个线程的计算结果

当线程阻塞时, 它通常被挂起, 并处于某种阻塞状态(BLOCKED, WAITING, TIMED_WAITING)

阻塞操作与执行时间很长的普通操作差别在于, 被阻塞的线程必须等待某个不受它控制的事件发生后才能继续执行, 例如等待
I/O操作完成, 等待某个锁变成可用, 或者等待某个外部计算的结果

BlockingQueue的put和take方法会抛出受检查异常(Checked Exception) Interrupted Exception, 这类库中其他一些方法
的做法相同, 例如Thread.sleep. 当抛出Interrupted Exception时, 表示该方法是一个阻塞方法, 如果这个方法中断, 那么
它将努力提前结束阻塞状态. 

Thread 提供了interrupt方法, 用于中断线程或者查询线程是否已经被中断. 每个线程都有一个boolean类型的属性, 表示线程
的中断状态, 当中断线程设置这个状态

当代码中调用了一个将抛出InterruptedException异常方法时, 你自己的方法也就变成了阻塞方法, 并且必须要处理对中断的响应
对于库代码来说, 有2种基本选择:
1. 传递 InterruptedException: 避开这个异常通常时最明智的策略 - 只需把InterruptedException 传递给方法的调用者
传递InterruptedException 的方法包括, 根本不捕获该异常, 或者捕获该异常, 然后在执行某种简单的清理工作后再抛出这个异常

2. 恢复中断 有时候不能抛出InterruptedException, 例如当代码是Runnable的一部分时, 在这些情况下, 必须捕获
InterruptedException, 并通过调用当前线程上的interrupt方法恢复中断状态, 这样在调用栈中更高层的代码将看到引发了一个中断

恢复中断状态以避免屏蔽中断

public class TaskRunnable implements Runnable{
	BlockingQueue<Task> queue; 
	...
	public void run(){
		try{
			processTask(queue.take());
		}catch(InterruptedException e){
			Thread.currentThread().interrupt();                           <----- 恢复中断状态
		}
	}
}

出现InterruptedException时不应该做的事是, 捕获它但不做任何响应. 这将使调用栈上更高层的代码无法对中断采取处理措施, 因为
线程被中断的证据已经丢失. 只有在一种特殊的情况中才能屏蔽中断, 即对Thread进行扩展, 并且能控制调用栈上所有更高层的代码. 

同步工具类

同步工具类可以是任何一个对象, 只要它根据其自身的状态来协调协程的控制流. 阻塞队列可以作为同步工具类, 其他类型的同步工具类
还包括信号量(Semaphore), 栅栏(Barrier) 以及闭锁(Latch). 

5.5.1 闭锁

闭锁可以延迟线程的进度直到其到达终止状态, 闭锁的作用相当于一扇门, 闭锁达到结束状态之前, 这扇门一直是关闭的. 并且没有任何
线程能通过, 当到达结束状态时, 这扇门会打开并允许所有的线程通过. 当闭锁达到结束状态后, 将不会再改变结束状态, 因此这扇门将
永远保持打开状态. 闭锁可以用来确保某些活动直到其他活动都完成后才继续执行
eg:
1. 确保某个计算在其需要的所有资源都被初始化之后才继续执行, 二元闭锁(包括两个状态), 可以用来表示"资源R已经被初始化", 而
所有需要R的操作都必须先在这个闭锁上等待
2. 确保某个服务在其依赖的所有其他服务都已经启动之后才启动, 每个服务都有个相关的2元闭锁. 当启动服务S时,将首先再S依赖的
其他服务的闭锁上等待, 所有依赖的服务都启动后会释放闭锁S, 这样其他依赖S的服务才能继续执行
3. 等待直到某个操作的所有参与者都就绪再继续执行(多玩家游戏中的所有玩家) 都就绪再继续执行, 在这种情况中, 当所有玩家都准备
就绪时, 闭锁将到达结束状态

CountDownLatch时一种灵活的闭锁实现, 可以在上述情况中使用, 它可以使一个或者多个线程等待一组事件发生, 闭锁状态包括一个计数器
该计数器初始化为一个正数表示需要等待的事件数量。countDown方法递减计数器, 表示有一个事件已经发生了, 而await方法等待计数器
为0, 这表示所有需要等待的事件都已经发生, 如果计数器的值非0, 那么await会一直阻塞直到计数器为0,或等待中的线程中断, 或者等待超时

两种常见用法: 
TestHarness创建一定数量的线程, 利用它们并发的执行指定的任务, 使用两个闭锁, 分别表示起始门starting gate和结束ending gate门.
起始门计数器的初始值为1, 而结束门计数器的初始值为工作线程的数量, 每个工作线程首先要做的是在启动门上等待, 从而确保所有线程就绪
后开始执行, 而每个线程要做的最后一件事情就是将调用结束门的countDown方法-1, 这能使主线程高效的等待直到所有工作线程都执行完成, 
因此可以统计所消耗的时间

public long timeTask(int nThreads, final Runnable task) throws InterruptedException{
	final CountDownLatch startGate = new CountDownLatch(1);
	final CountDownLatch endGate = new CountDownLatch(nThreads);
	for(int i=0; i<nThreads, i++){
		Thread t = new Thread(){
			public void run(){
				try{
					startGate.await();
					try{
						task.run();
					}catch(InterruptedException ignored){
					}finally{
						endGate.countDown();
					}
				}
			}
		};
		t.start();
	}
	long start = System.nanoTime();
	startGate.countDown();
	endGate.await();
	long end = System.nanoTime();
	return end-start;
}

场景: 测试n个线程并发执行某个任务时所需要的时间. 如果在创建线程后就立即启动它们, 那么先启动的线程将领先
后启动的线程, 并且活跃线程数量会随着时间推移而增减, 竞争程度也在不断发生变化, 启动门将使得主线程能够同时
释放所有工作线程, 结束门则使主线程能够等待最后一个线程执行完成, 而不是顺序等待每个线程执行完成. 

5.5.2 FutureTask

FutureTask可以用做闭锁.FutureTask的计算是通过Callable来实现的, 相当于一种可生成结果的Runnable, 并且可以
可以处于以下3种状态: 等待运行(waiting to run), 正在运行(running), 运行完成(completed). 执行完成表示计算
所有可能结束方式, 包括正常结束, 由于取消而结束和异常结束. 当FutureTask进入完成状态后, 它会永远停止在这个状态

Future.get行为取决于任务的状态, 如果任务已经完成, 那么get会立即返回结果, 否则get将阻塞直到任务进入完成状态
然后返回结果或者抛出异常. FutureTask将计算结果从执行计算的线程传递到获取这个结果的线程, 而FutureTask的规范
确保了这种传递过程能实现结果的安全发布. 

FutureTask在Executor框架种表示异步任务, 此外还可以用来表示一些时间较长的计算, 这些计算可以使用计算结果前启动
Preloader就是用FutureTask来执行一个高开销的计算, 并且计算结果将在稍后使用, 通过提前启动计算, 可以减少等待结果
需要时间. 

public class Preloader{
	private final FutureTask<ProductInfo> future = new FutureTask<>(new Callable<ProductInfo>(){
		public ProductInfo call() throws DataloadException{
			return loadProductInfo();
		}
	});

	private final Thread thread = new Thread(future);

	public void start(){
		thread.start();
	}

	public ProductInfo get() throws DataLoadException, InterruptedException{
		try{
			return future.get();
		}catch(ExcutionException e){
			Throwable cause = e.getCause();
			if(cause instanceof DataLoadException)
				throw (DataLoadException) cause;
			else 
				throw launderThrowable(cause);
		}
	}
}

Preloader 创建了一个FutureTask, 其中包含从数据库加载产品信息的任务, 以及一个执行运算的线程, 由于在构造函数
或者静态初始化方法种启动线程并不是一种好方法, 因此提供一个start方法来启动线程. 当程序随后需要productInfo时
, 可以调用get方法, 如果数据已经加载, 那么将返回这些数据, 否则将等待加载完成后再返回. 

Callable表示任务可以抛出受检查的或未受检查的异常, 并且任何代码都可能抛出一个Error, 无论任务抛出什么异常, 都会
被封装到一个ExecutionException中, 并在Future.get中被重新抛出, 这将使调用get代码变得复杂, 因为它不仅需要处理
可能出现的ExecutionException, 而且还由于ExecutionException是作为一个Throwable类返回的, 因此处理起来并不容易

Preloader中, 当get方法抛出ExecutionException时, 可能是以下3种情况: 1. Callable抛出的受检查异常, RuntimeException
, 以及error. 我们必须对每种情况进行单独处理, 但我们将使用程序清单中的launderThrowable辅助方法来封装一些复杂的异常处理. 
在调用lanuderThrowable之前, Preloader会首先检查已知的受检查异常, 并重新抛出它们. 剩下的是未检查异常, preloader
将会调用launderThrowable并抛出结果, 如果throwable传递给launderThrowable的是一个error, 那么launderThrowable将
直接再次抛出它, 如果不是RuntimeException, 那么将抛出一个IllegalStateException表一个错误逻辑. 剩下的RuntimeException
, launderThrowable将把它们返回给调用者, 而调用者会重新抛出它们. 

如果throwable是error则抛出它, 如果是runtimeException 则返回它, 否则illegalStateException

public static RuntimeException launderThrowable(Throwable t){
	if(t instanceof RuntimeException)
		return (RuntimeException) t
	else if(t instanceof Error)
		throw (Error) e	
	else 
		throw new IllegalStateException("Not checked", t);
}

5.5.3 信号量 
计数信号量(Counting Semaphore) 是用来控制同时访问某个特定资源的操作数量, 或者同时执行某个特定操作的数量. 
计数信号量还可以用来实现某种资源池, 或对容器施加边界. 
Semaphore中管理着一组虚拟的许可(permit), 许可的初始数量通过构造函数来决定, 在执行操作可以先获得许可, 
并在使用以后释放许可. 如果没有许可, 那么acquire会一直阻塞直到有许可(或中断/操作超时) release方法
将返回一个许可给信号量. 计算信号量的简化形式是2值信号量, 初始值为1的semaphore. 2值信号量可以用作
互斥体(mutex) 并具备不可重入的加锁语义, 谁拥有了这个许可, 就拥有了互斥锁.

Semaphore 可以用于实现资源池, 例如数据库连接池. 我们可以构造一个固定长度资源池, 当池为空时, 请求资源将会失败
当你真正看到的行为是阻塞而不是失败, 并且当池非空时, 请求资源将会失败, 但真正希望看到的行为是阻塞而不是失败, 
并且当池非空时解除阻塞. 如果将Semaphore的计数值初始化为池的大小, 并从池中获取一个资源之前首先调用acquire
方法获取一个许可, 在返回给池之后调用release 释放许可. 那么acquire将一直阻塞直到资源池不为空

同样你可以使用Semaphore将任何一种容器变成有界阻塞容器, 信号量的计数值会初始化为容器容量的最大值. add操作在底层容器
中添加一个元素之前, 首先要获取一个许可. 如果add操作没有添加任何元素, 那么会立刻释放许可. remove操作释放一个许可，
使更多的元素能够添加到容器中, 底层的set实现并不知道关于边界的任何消息, 这是由BoundedHashSet来处理的

使用Semaphore为容器设置边界
public class BoundedHashSet<T>{
	private final Set<T> set;
	private final Semaphore sem;

	public BoundedHashSet(int bound){
		this.set = Collections.synchronizedSet(new HashSet<T>());
		sem = new Semaphore(bound);
	}

	public boolean add(T o) throws InterruptedException{
		sem.acquire();
		boolean wasAdded = false;
		try{
			wasAdded = set.add(o);
			return wasAdded;
		}
		finally{
			if(!wasAdded){
				sem.release();
			}
		}
	}

	public boolean remove(Object o){
		boolean wasRemoved = set.remove(o);
		if(wasRemoved){
			sem.release();
		}
		return wasRemoved;
	}
}

5.5.4 栅栏

栅栏(Barrier)类似于闭锁, 它能阻塞一组线程直到某个事件发生, 栅栏与闭锁的关键区别在于, 所有线程必须同时到达栅栏位置
, 才能继续执行, 闭锁用于等待事件, 而栅栏用于等待其他线程, 栅栏用于实现一些协议, 比如约定等待一起做某事. 
CyclicBarrier可以使一定数量的参与方反复在栅栏位置汇集, 它在并行迭代算法中非常有用, 这种算法通常将一个问题拆分成
一系列相互独立的子问题. 当线程都到达栅栏位置时将调用await方法, 这个方法将阻塞直到所有线程都到达栅栏位置. 如果
所有线程都到达栅栏位置, 那么栅栏将打开, 此时所有线程都被释放, 而栅栏被重置以便下次使用, 如果对await的调用超时
或者await阻塞的线程都被中断, 那么栅栏被认为是打破了, 所有阻塞的await调用都将终止并抛出BrokenBarrierException
如果成功通过栅栏, 那么await将为每个线程返回一个唯一到达索引号, 我们可利用索引来选举产生一个领导线程, 并在下一次
迭代中由该领导线程执行一些特殊的工作, CyclicBarrier还可以使你将一个栅栏操作传递给构造函数, 这是一个Runnable, 当
成功通过栅栏时会执行它, 但在阻塞线程被释放前是不能执行的. 

在模拟程序中通常需要使用栅栏, 例如某个步骤中的计算可以并行执行, 但必须等到该步骤中的所有计算都执行完毕才能进入下一个步骤.
例如, 在n-body粒子模拟系统中, 每个步骤都根据其他粒子的位置和属性来计算各个粒子的新位置. 通过在每两次更新之间等待栅栏
能够确保在第K步中的所有更新操作都已经计算完毕, 才进入第k+1步

通过栅栏来计算细胞的自动化模拟, Conway的生命游戏, 在把模拟过程并行化时, 为每个元素分配一个独立的线程是不实际的, 因为这将
产生过多的线程, 而在协调这些线程上导致的开销将降低计算性能. 合理的做法是, 将问题分解成一定数量的子问题, 为每个子问题分配一个
线程来进行求解, 之后再将所有的结果合并起来. CellularAutomata将问题分解为Ncpu个子问题, 其中Ncpu等于可用CPU的数量, 
并将每个子问题分配给一个线程. 在每个步骤中, 工作线程都为各自子问题中的所有细胞计算新值. 当所有工作线程都到达栅栏时, 
栅栏会把这些新值提交给数据模型, 在栅栏的操作执行完以后, 工作线程将开始下一步计算, 包括调用isDone方法来判断是否需要进行下一次迭代

通过CyclicBarrier协调细胞自动衍生系统中的计算

public class CellularAutomata{
	private final Board mainBoard;
	private final Cyclicbarrier barrier;
	private final Worker[] workers;
	
	public CellularAutomata(Board board){
		this.mainBoard = board; 
		int count = Runtime.getRuntime().availablePrcessors();
		this.barrier = new CyclicBarrier(count, new Runnable(){
			public void run(){
				mainBoard.commitNewValues();
			}
		});
		this.worker = new Worker[count];
		for(int i=0; i<count ; i++){
			workers[i] = new Worker(mainBoard.getBoard(count, i));
		}
	}

	private class Worker implements Runnable{
		private final Board board; 
		public Worker(Board board){
			this.board = board; 
		}
		public void run(){
			while(!board(hasConverged())){
				for(int x =0; x < board.getMaxX(); x++){
					for(int y = 0; y< board.getMaxY(); y++){
						board.setNewValue(x, y, computeValue(x, y));
				try{
					barrier.await();
				}catch(InterruptedException ex){
					return;
				}catch(BrokenBarrierException ex){
					return;
				}
			}
		}

		public void start(){
			for(int i=0; i <workers.length; i++){
				new Thread(workers[i]).start();
			mainBoard.waitForConvergence();
		}
	} 
}

另一种形式的栅栏是Exchanger, 它是一种两方(two-party)的栅栏, 各方在栅栏位置上交换数据. 当两方执行不对称的操作时,
Exchanger会非常有用, 例如当一个线程向缓冲区写入数据, 而另一个线程从缓冲区中读取数据. 这些线程可以使用Exchanger 
来汇合, 并将满的缓冲区与空的缓冲区交换. 当两个线程通过Exchanger交换对象时, 这种交换就把这两个对象安全的发布给另一方
	数据交换的时机取决于应用程序的响应需求. 最简单的方案是, 当缓冲区被填满时, 由填充任务进行交换, 当缓冲区为空时,
由清空任务进行交换. 这样会把需要交换的次数降至最低, 如果新数据的到达率不可预测, 那么一些数据的处理过程就将延迟.
另一个方法是, 不仅当缓冲区被填满时进行交换, 并且当缓冲区被填充到一定程度并保持一定时间后,也进行交换. 

5.6 构建高效且可伸缩的结果缓存

Computable<A, V> 接口声明了一个函数Computable, 其输入类型为A, 输出类型为V. 在ExpensiveFunction中实现的Computable,
需要很长的时间来计算结果, 我们将创建一个Computable包装器, 帮助记住之前的计算结果, 并将缓存过程封装起来. 

使用HashMap和同步机制来初始化缓存(糟糕的并发性)

public interface Computable<A, V> {
	V compute(A arg) throws InterruptedException;
}

public class ExpensiveFunction implements Computable<String, BigInteger> {
	public BigInteger compute(String args){
		//在经过长时间计算后
		return new BigInteger(arg);
	}
}


public class Memoizer1<A, V> implements Computable<A, V>{
	@GuardedBy("this")
	private final Map<A, V> cache = new HashMap<A, V>();
	private final Computable<A, V> c;

	public Memoizerl(Computable<A, V> c){
		this.c = c;
	}

	public synchronzied V compute(A arg) throws InterruptedException{
		V result = cache.get(arg);
		if(result == null){
			reuslt = c.compute(arg);
			cache.put(arg, result);
		}
		return result;
	}
}

Memoizer1给出了第一种尝试, 使用HashMap来保存之前的计算结果. Compute方法将首先检查需要的结果是否已经在缓存中
, 如果存在则返回之前计算的值. 否则, 把计算结果缓存在HashMap中, 然后再返回

HashMap不是线程安全的, 因此要确保两个线程不会同时访问HashMap, Memoizer1采用了保守的方法, 即对整个compute方法
进行同步, 这种方法能确保线程安全性, 但会带来明显的可伸缩性问题: 每次只有一个线程能执行compute, 如果另一个线程
正在计算结果, 那么其他调用compute的线程可能被阻塞很长时间. 如果有多个线程在排队等待还未计算出的结果, 那么
compute的线程可能被阻塞很长时间, compute方法计算时间可能比没有记忆操作的计算时间更长.

B被A阻塞消耗大量时间
Thread A:   --计算f(1) -将f(1)放入缓存-------------------------------------------
Thread B:  	--------------------------计算f(2)-将f(2)放入缓存--------------------
Thread C: 	------------------------------------------------返回缓存中的f(2)-----


用ConcurrentHashMap代替HashMap来改进Memoizer1中糟糕的并发行为, 由于ConcurrentHashMap是线程安全的, 因此在访问
底层Map时就不需要进行同步, 因此避免了Memoizer1中的compute方法进行同步时带来的串行性

public class Memoizer2<A, V> implements Computable<A, V> {
	private final Map<A, V> cache = new ConcurrentHashMap<>();
	private final Computable<A, V> c;

	public Memoizer2(Computable<A, V> c){this.c = c;}

	public V compute(A arg) throws InterruptedException{
		V result = cache.get(arg);
		if(result == null){
			result = c.compute(arg);
			cache.put(arg, result);
		}
		return result;
	}
}

不足: 当两个线程同时调用Compute时存在一个漏洞, 可能会导致计算得到相同的值. 在使用memoizatin的情况下, 这只会带来低效
, 因为缓存的作用是避免计算多次. 如果一个线程启动了开销很大的计算, 而其他线程并不知道整个计算正在进行, 那么很可能会
重复这个计算, 我们想让其他线程知道正在进行一个相同的计算, 它能够知道最高效的方法是等待线程X计算结束, 再去查缓存的结果是多少

我们知道一个类能实现这个功能 FutureTask, FutureTask表示一个计算的过程, 这个过程可能已经计算完成, 也可能正在进行, 
如果有结果可用, 那么FutureTask.get将立即返回结果, 否则它会一直阻塞, 直到结果出来再将其返回. 


计算两个相同值时会消耗大量时间
Thread A: -----f(1)不在缓存中------计算f(1)-----将f(1)放入缓存---------------------
Thread B: ----------------------f(1)不在缓存-----计算f(1)--------将f(1)放入缓存----

Memoizer3将用于缓存值得Map重新定义为ConcurrentHashMap<A, Future<V>> 替换原来的ConcurrentHashMap<A, V> 
Memoizer3首先检查某个相应的计算是否已经开始(Memoizer2是先计算某个计算是否已经完成). 如果还没有启动，
那就创建一个FutureTask, 并注册到Map中, 然后启动计算: 如果已经启动, 那么等待现有计算的结果. 结果可能很快
会得到, 也可能还在运算过程中, 但这对于Future.get的调用者来说是透明的. 

基于FutureTask的Memoizing 封装器

public class Memoizer3<A, V> implements Computable<A, V> {
	private final Map<A, Future<V>> cache = new ConcurrentHashMap<A, Future<V>>();
	private final Computable<A, V> c;

	public Memoizer3(Computable<A, V> c){this.c = c};

	public V compute(final A arg)throws InterruptedException{
		Future<V> f = cache.get(arg);
		if(f == null){
			Callable<V> eval = new Callable<V>(){
				public V call() throws InterruptedException{
					return c.compute(arg);
				}
			};
			FutureTask<V> ft = new FutureTask<>(eval);
			f = ft;
			cache.put(arg, ft);
			ft.run(); //在这里调用c.compute
		}
		try{
			return f.get();
		}catch(ExectionException e){
			throw lanuderThrowable(e.getCause());
		}
	}
}


Memoizer3实现几乎是完美的, 它表现了非常好的并发性(基于ConcurrentHashMap的高效并发性), 若结果已经计算出来, 那么立即返回
, 如果其他线程正在计算该结果, 那么新到的一个线程将一直等待这个结果被计算出来. 它只有一个缺陷, 即仍然存在两个线程计算相同
值的漏洞. 由于compute方法中的if代码是非原子的(先检查再执行)操作, 因此两个线程仍有可能在同一时间内调用compute来计算相同值
, 即二者都没有再缓存中找到期望的值, 因此都开始计算


错误的执行时序将使得Memorizer3将相同的值计算两次
Thread A: ----f(1)不在缓存中-----将f(1)Future 放入缓存中------计算f(1)-----设置结果
Thread B: ----------f(1)不在缓存中------将f(1)Future 放入缓存中------计算f(1)-----设置结果

Memoizer3中存在的问题原因是, 复合操作(先检查再执行)是在底层的map对象上执行的, 而这个对象无法通过加锁来确保原子性, 
使用原子方法putIfAbsent避免漏洞

public class Memoizer3<A, V> implements Computable<A, V> {
	private final Map<A, Future<V>> cache = new ConcurrentHashMap<A, Future<V>>();
	private final Computable<A, V> c;

	public Memoizer3(Computable<A, V> c){this.c = c};

	public V compute(final A arg)throws InterruptedException{
		while(true){
			Future<V> f = cache.get(arg);
			if(f == null){
				Callable<V> eval = new Callable<V>(){
					public V call() throws InterruptedException{
						return c.compute(arg);
					}
				};
				FutureTask<V> ft = new FutureTask<>(eval);
				f = cache.putIfAbsent(arg, ft);
				if(f == null){
					f = ft;
					ft.run();
				}
			}
			try{
				return f.get();
			}catch(CancellationException e){
				cache.remove(arg, f);
			}catch(ExecutionException e){
				throw launderThrowable(e.getCause());
			}
		}
	}
}

当缓存的是Future而不是值时, 将导致缓存污染(cache pollution)问题: 如果某个计算被取消或者失败, 那么
在计算这个结果时将指明计算过程被取消或者失败, 为了避免这种情况, 如果Memoizer发现计算被取消, 那么将
把Future从缓存中移除. 如果检测到RuntimeException, 也会移除Future, 这样将来的计算才可能成功.

Memoizer3同样没有解决缓存逾期的问题, 但它可以通过使用Future子类来解决, 在子类中为每个结果指定一个
逾期时间, 并定期扫描缓存中逾期的元素.

在完成并发缓存的实现之后, 就可以为第二章中因式分解servlet添加结果缓存.

程序Factorizer 使用 Memoizer来缓存之前的计算结果, 这种方法不仅高效, 而且可扩展性也很高

在因式分解servlet中使用memoizer来缓存结果

@ThreadSafe
public class Factorizer implements Servlet{
	private final Computable<BigInteger, BigInteger[]> c = 
	new Computable<BigInteger, BigInteger[]>(){
		public BigInteger[] compute(BigInteger arg){
			return factor(arg);
		}
	};
	private final Computable<BigInteger, BigInteger[]> cache =
	new Memoizer<BigInteger, BigInteger[]>(c);

	public void service(ServletRequest req, ServletResponse resp){
		try{
			BigInteger i = extractFromRequest(req);
			encodeIntoResponse(resp, cache.compute(i));
		}catch(InterruptedException e){
			encodeError(resp, "factorization interruped");
		}
	}
}


第一部分小结

1. 确定可变状态是非常重要的
*所有的并发问题都可以归结为如何协调对并发状态的访问, 可变状态越少, 越容易确保线程安全性
*尽量将域声明为final类型,除非它们是可变的
*不可变对象一定是线程安全的, 不可变对象能极大降低并发编程的复杂性, 它们更为简单安全, 
可以任意共享而无需使用加锁或保护性复制等机制
*封装有利于管理复杂性, 将数据封装在对象中更易于维持不变性条件, 将同步机制封装在对象中, 更易于遵循同步策略
*用锁来保护每个变量
*当保护同一个不变性条件中的所有变量时, 要使用同一个锁. 
*在执行复合操作期间, 要持有锁
*如果从多个线程中访问同一个可变量时没有同步机制, 那么程序会出现问题
*不要故作聪明的推断出不需要同步
*在设计过程中考虑线程安全, 或者在文档中明确说明不是线程安全的
*将同步策略文档化


